/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createFeedback } from '../fn/feedback/create-feedback';
import { CreateFeedback$Params } from '../fn/feedback/create-feedback';
import { deleteFeedback } from '../fn/feedback/delete-feedback';
import { DeleteFeedback$Params } from '../fn/feedback/delete-feedback';
import { FilmFeedbackResponse } from '../models/film-feedback-response';
import { getAllFeedback } from '../fn/feedback/get-all-feedback';
import { GetAllFeedback$Params } from '../fn/feedback/get-all-feedback';
import { getFeedbackById } from '../fn/feedback/get-feedback-by-id';
import { GetFeedbackById$Params } from '../fn/feedback/get-feedback-by-id';
import { getFeedbackForFilm } from '../fn/feedback/get-feedback-for-film';
import { GetFeedbackForFilm$Params } from '../fn/feedback/get-feedback-for-film';
import { PageResponseFilmFeedbackResponse } from '../models/page-response-film-feedback-response';
import { updateFeedback } from '../fn/feedback/update-feedback';
import { UpdateFeedback$Params } from '../fn/feedback/update-feedback';


/**
 * The feedback API
 */
@Injectable({ providedIn: 'root' })
export class FeedbackService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getFeedbackById()` */
  static readonly GetFeedbackByIdPath = '/feedbacks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFeedbackById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedbackById$Response(params: GetFeedbackById$Params, context?: HttpContext): Observable<StrictHttpResponse<FilmFeedbackResponse>> {
    return getFeedbackById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFeedbackById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedbackById(params: GetFeedbackById$Params, context?: HttpContext): Observable<FilmFeedbackResponse> {
    return this.getFeedbackById$Response(params, context).pipe(
      map((r: StrictHttpResponse<FilmFeedbackResponse>): FilmFeedbackResponse => r.body)
    );
  }

  /** Path part for operation `updateFeedback()` */
  static readonly UpdateFeedbackPath = '/feedbacks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFeedback()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFeedback$Response(params: UpdateFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<FilmFeedbackResponse>> {
    return updateFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFeedback$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFeedback(params: UpdateFeedback$Params, context?: HttpContext): Observable<FilmFeedbackResponse> {
    return this.updateFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<FilmFeedbackResponse>): FilmFeedbackResponse => r.body)
    );
  }

  /** Path part for operation `deleteFeedback()` */
  static readonly DeleteFeedbackPath = '/feedbacks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFeedback()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFeedback$Response(params: DeleteFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFeedback$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFeedback(params: DeleteFeedback$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllFeedback()` */
  static readonly GetAllFeedbackPath = '/feedbacks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllFeedback()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFeedback$Response(params?: GetAllFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FilmFeedbackResponse>>> {
    return getAllFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllFeedback$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFeedback(params?: GetAllFeedback$Params, context?: HttpContext): Observable<Array<FilmFeedbackResponse>> {
    return this.getAllFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FilmFeedbackResponse>>): Array<FilmFeedbackResponse> => r.body)
    );
  }

  /** Path part for operation `createFeedback()` */
  static readonly CreateFeedbackPath = '/feedbacks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createFeedback()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFeedback$Response(params: CreateFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<FilmFeedbackResponse>> {
    return createFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createFeedback$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFeedback(params: CreateFeedback$Params, context?: HttpContext): Observable<FilmFeedbackResponse> {
    return this.createFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<FilmFeedbackResponse>): FilmFeedbackResponse => r.body)
    );
  }

  /** Path part for operation `getFeedbackForFilm()` */
  static readonly GetFeedbackForFilmPath = '/feedbacks/film/{filmId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFeedbackForFilm()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedbackForFilm$Response(params: GetFeedbackForFilm$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseFilmFeedbackResponse>> {
    return getFeedbackForFilm(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFeedbackForFilm$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedbackForFilm(params: GetFeedbackForFilm$Params, context?: HttpContext): Observable<PageResponseFilmFeedbackResponse> {
    return this.getFeedbackForFilm$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseFilmFeedbackResponse>): PageResponseFilmFeedbackResponse => r.body)
    );
  }

}
